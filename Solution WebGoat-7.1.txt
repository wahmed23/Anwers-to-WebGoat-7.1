Start OWASP Proxy and open a browser (I am using firefox) that is preconfigured to send traffic via ZAP.


1. Access Control Flaws:
  1.1 Using an Access Control Matrix:
  A.   Set break point on your ZAP for all traffic by clicking the green round button
       Check access through user "Shemp" and you are done

  1.2 Bypass a Path based access Control Scheme
  A.  Set break point on ZAP.
      Change the variable "File" in your request that is sent to the server to
      "../../../../../WEB-INF/spring-security.xml"

  1.3 Bypass Business layer access Control
  A.  For starters, the password for user "Tom Cat" would be "tom"
      Log in as "Larry Stooge" with password "larry"
      Using ZAP, change the "employee_ID" to "105" as this is the ID of "Tom Cat"
      Change the "action" parameter to "DeleteProfile". This will delete Tom Cat's
      profile.

2. Ajax security:
   2.1 DOM Injection
   A.  Write anything in the box in front of "License Key"
       When you intercept the traffic from server replace the body with
       "document.form.SUBMIT.disabled=false".
       You may to have to do this on all the replies that you intercept from the server
   2.2 DOM-Based cross-site scripting
   A.  Stage1: <img src="images/logos/owasp.jpg"/>
       Stage2: <img src=x onerror=;;alert('XSS')/>
       Stage3: <iframe src="javascript:alert('XSS');"/>
       Stage4: Enter the html script showed
       Stage5: Only available for developer version
   2.3 XML Injection
   A.  Intercept the traffic towards the server and change the parameters:
       "check1001" to "check1004" or "check1005"
   2.4 JSON Injection
   A.  Select the flight with 0 stops.
       Intercept the traffic going towards server and
       change the "price2Submit" to "$300".
   2.5 Silent Transactions Attacks
   A.  Write "javascript:submitData(1234566,11000)".
       However this will not totally work. Modern browsers do not let you
       execute javascript from address bar. But you still will get the green check
       mark for completion.
   2.6 Insecure Client Storage
   A.  Find the javascript code in the html that is responsible for the coupon code.
       Function decrypt(code) is the code you should be looking at. This will be tricky
       in Firefox browser, so yo may need Chrome or better go for Edge.
       In MS Edge, just "inspect" the box for coupon code. and then in "debugger" tab
       search for "isValidCode" and put the break on line with variable "decrypted".
       Write anything in the box for coupon and once the breakpoint is hit, hove mouse
       over "decrypted" and you will get your answer.
       The point here is that the Javascript "clientSideValidation.js" is sent over as
       a variable/string to an eval() function. That is why you will not be able to see
       it in the normal rendered javascripts.
       You can still find the code in Chrome by going to the console and type
       "isValidCoupon". You can see three dots in the end of the code, click them and
       voila, you can see the code. Put the break point and carry on as described above.
       There is an extremely simple way in Firefox to this problem. Look at the code by
       copying the full address from the rendered HTML code and you would figure out
       that the variable "decrypted". If you just write the variable in the console,
       it will show the value that is the answer. In my case it is "PRESSTWO".
       Next step requires you to make the order free. The way I did it, was to Intercept
       the traffic with ZAP, change the value to 0.00 of variable "f.FRANDTOT.value".
